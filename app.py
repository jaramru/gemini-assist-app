# -*- coding: utf-8 -*-
import os
import re
from io import BytesIO
from datetime import datetime

import streamlit as st
import pandas as pd
import google.generativeai as genai

from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT


# =========================================
#  CONFIGURACI√ìN UI B√ÅSICA
# =========================================
st.set_page_config(page_title="Gemini Assist", layout="wide")

# Logo (si existe)
try:
    st.image("images/logo.png", width=140)
except Exception:
    pass

st.title("üîß Gemini Assist ‚Äì Informe Predictivo de Mantenimiento")


# =========================================
#  API KEY (Secrets ‚Üí GOOGLE_API_KEY)
# =========================================
API_KEY = None
try:
    API_KEY = st.secrets.get("GOOGLE_API_KEY", None)
except Exception:
    API_KEY = None

if not API_KEY:
    API_KEY = os.getenv("GOOGLE_API_KEY")

if not API_KEY:
    st.error(
        "‚ùå No se encontr√≥ la API KEY. Config√∫rala en Streamlit Cloud ‚Üí Settings ‚Üí Secrets con:\n\n"
        '```\nGOOGLE_API_KEY="tu_clave"\n```'
    )
    st.stop()

# Configurar Gemini
genai.configure(api_key=API_KEY)


# =========================================
#  SYSTEM INSTRUCTIONS (tono, estructura)
# =========================================
SYSTEM_INSTRUCTIONS = """
Eres "Gemini Assist", un asistente experto en mantenimiento hospitalario.
Objetivo: generar un informe claro, profesional y neutro (blanco y negro), basado en una tabla de activos.

REGLAS DE FORMATO PARA LA SALIDA:
- NO uses Markdown de negritas **‚Ä¶** ni cabeceras ###. Escribe texto plano.
- Usa numeraciones simples (‚Äú1. T√≠tulo‚Äù, ‚Äú2. T√≠tulo‚Äù‚Ä¶). Evita dobles numeraciones como ‚Äú1.  1.‚Äù.
- Usa listas con vi√±etas simples para acciones (‚Äú- Acci√≥n ‚Ä¶‚Äù).
- Mant√©n un tono ejecutivo, sint√©tico y preciso.

SECCIONES A ENTREGAR (siempre en este orden):
1. Acciones preventivas para los 3 activos m√°s cr√≠ticos (con raz√≥n breve de criticidad).
2. Estimaci√≥n de ahorro en ‚Ç¨ y horas si aplico esas medidas (suma aproximada).
3. Panel de alertas (Bajo, Medio, Alto) para cada activo.
4. Informe ejecutivo final (m√°x. 5 l√≠neas, lenguaje de direcci√≥n).

NO incluyas tablas Markdown; usa texto.
"""


# =========================================
#  LIMPIEZAS DE TEXTO Y PREVIEW
# =========================================
def normaliza_numeracion(texto: str) -> str:
    """
    Corrige la doble numeraci√≥n: '1.  1. T√≠tulo' ‚Üí '1. T√≠tulo'
    y casos '1.1. T√≠tulo' ‚Üí '1. T√≠tulo'.
    """
    texto = re.sub(r'(^|\n)\s*\d+\.\s*\d+\.\s*', r'\1', texto)
    texto = re.sub(r'(^|\n)\s*(\d+)\.\d+\.\s*', r'\1\2. ', texto)
    return texto


def limpiar_para_preview(texto: str) -> str:
    """
    Limpia marcas Markdown y deja el texto listo para mostrar.
    - Quita **negritas**, ### cabeceras.
    - Normaliza numeraci√≥n.
    - Convierte '-' o '*' al inicio de l√≠nea en vi√±etas '‚Ä¢ ' (solo para vista).
    """
    texto = re.sub(r"\*\*(.*?)\*\*", r"\1", texto)
    texto = re.sub(r'(^|\n)\s*###\s*', r'\1', texto)
    texto = re.sub(r'(^|\n)\s*##\s*',  r'\1', texto)

    texto = normaliza_numeracion(texto)

    texto = re.sub(r'(^|\n)\s*-\s+', r'\1‚Ä¢ ', texto)
    texto = re.sub(r'(^|\n)\s*\*\s+', r'\1‚Ä¢ ', texto)

    return texto.strip()


def to_markdown_preview(texto_limpio: str) -> str:
    """
    Convierte el texto limpio en Markdown ‚Äúbonito‚Äù:
    - L√≠neas que empiezan con 'N. ' se muestran en **negrita** (t√≠tulos).
    - Vi√±etas '‚Ä¢ ' pasan a '- ' (para que Streamlit las pinte como bullets).
    """
    md_lines = []
    for raw in texto_limpio.splitlines():
        line = raw.rstrip()
        if not line.strip():
            md_lines.append("")
            continue

        if re.match(r'^\s*\d+\.\s+', line):
            # T√≠tulo con numeraci√≥n simple: lo marcamos en negrita
            md_lines.append(f"**{line.strip()}**")
        elif line.strip().startswith("‚Ä¢ "):
            md_lines.append("- " + line.strip()[2:])
        else:
            md_lines.append(line)
    return "\n".join(md_lines)


# =========================================
#  GENERACI√ìN DE WORD
# =========================================
def generar_word(informe_texto: str) -> BytesIO:
    """
    Construye un DOCX elegante en blanco y negro con el contenido ya normalizado.
    """
    doc = Document()

    # M√°rgenes y portada
    section = doc.sections[0]
    section.top_margin = Inches(1)
    section.bottom_margin = Inches(1)
    section.left_margin = Inches(1)
    section.right_margin = Inches(1)

    # Logo centrado (si existe)
    try:
        p = doc.add_paragraph()
        run_logo = p.add_run()
        run_logo.add_picture("images/logo.png", width=Inches(1.8))
        p.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    except Exception:
        pass

    # T√≠tulos de portada
    pt = doc.add_paragraph("Gemini Assist")
    pt.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = pt.runs[0]
    run.font.size = Pt(26)
    run.bold = True
    run.font.color.rgb = RGBColor(0, 0, 0)

    stit = doc.add_paragraph("Informe Predictivo de Mantenimiento")
    stit.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    stit.runs[0].font.size = Pt(13)
    stit.runs[0].font.color.rgb = RGBColor(90, 90, 90)

    fecha = doc.add_paragraph(datetime.now().strftime("%d/%m/%Y"))
    fecha.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    fecha.runs[0].font.size = Pt(11)
    fecha.runs[0].font.color.rgb = RGBColor(70, 70, 70)

    doc.add_page_break()

    # Contenido (ya limpio y normalizado)
    texto = normaliza_numeracion(informe_texto)
    texto = re.sub(r"\*\*(.*?)\*\*", r"\1", texto)
    texto = re.sub(r'(^|\n)\s*###\s*', r'\1', texto)

    for raw in texto.splitlines():
        line = raw.strip()
        if not line:
            doc.add_paragraph("")
            continue

        if re.match(r'^\d+\.\s+', line):
            # Cabecera de secci√≥n (Heading 2)
            h = doc.add_paragraph()
            r = h.add_run(line)
            r.bold = True
            r.font.size = Pt(14)
        elif line.startswith("‚Ä¢ "):
            # Vi√±etas
            p = doc.add_paragraph(line[2:], style="List Bullet")
            p.runs[0].font.size = Pt(11)
        else:
            # P√°rrafos
            p = doc.add_paragraph(line)
            p.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            p.runs[0].font.size = Pt(11)

    # Exportar
    buf = BytesIO()
    doc.save(buf)
    buf.seek(0)
    return buf


# =========================================
#  UI: SUBIDA Y GENERACI√ìN
# =========================================
uploaded_file = st.file_uploader("üìÇ Sube el archivo de activos (Excel)", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
    except Exception as e:
        st.error(f"Error leyendo Excel: {e}")
        st.stop()

    st.success("‚úÖ Archivo cargado correctamente")
    st.dataframe(df, use_container_width=True)

    if st.button("üöÄ Generar Informe", type="primary"):
        with st.spinner("üß† Generando informe con Gemini Assist..."):
            try:
                tabla_texto = df.to_string(index=False)

                user_prompt = f"""
A continuaci√≥n tienes la tabla de activos hospitalarios (Excel textual):

{tabla_texto}

Con esa tabla, genera el informe con exactamente las secciones y reglas indicadas en las instrucciones del sistema.
Recuerda: sin s√≠mbolos Markdown, numeraci√≥n simple (1., 2., 3., 4.) y vi√±etas simples.
"""

                model = genai.GenerativeModel(
                    model_name="gemini-2.5-flash",
                    system_instruction=SYSTEM_INSTRUCTIONS
                )
                response = model.generate_content(user_prompt)
                informe = (response.text or "").strip()

                if not informe:
                    st.error("‚ö†Ô∏è No se obtuvo respuesta del modelo.")
                    st.stop()

                # Vista previa (limpia + markdown elegante)
                preview_clean = limpiar_para_preview(informe)
                preview_md = to_markdown_preview(preview_clean)

                st.subheader("üìù Vista previa del informe")
                st.markdown(preview_md)

                # Bot√≥n de descarga (Word)
                word_bytes = generar_word(preview_clean)
                st.download_button(
                    label="‚¨áÔ∏è Descargar Informe (Word)",
                    data=word_bytes,
                    file_name="informe_predictivo.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )

            except Exception as e:
                st.error(f"‚ùå Error al generar el informe: {e}")
