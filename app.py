import os
import re
from io import BytesIO
from datetime import datetime

import streamlit as st
import pandas as pd
import google.generativeai as genai

from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT


# ==============================
# Configuraci√≥n general
# ==============================
st.set_page_config(page_title="Gemini Assist ‚Äì Informe Predictivo", layout="wide")

# Logo (cabecera simple, sin panel lateral)
try:
    st.image("images/logo.png", width=150)
except Exception:
    pass

st.title("üîß Gemini Assist ‚Äì Informe Predictivo de Mantenimiento")


# ==============================
# API Key (sin panel lateral)
# ==============================
def get_api_key() -> str | None:
    # 1) st.secrets
    if hasattr(st, "secrets") and "GOOGLE_API_KEY" in st.secrets:
        return st.secrets["GOOGLE_API_KEY"]
    # 2) Variables de entorno
    return os.getenv("GOOGLE_API_KEY")


API_KEY = get_api_key()
if not API_KEY:
    st.error(
        "‚ùå No se encontr√≥ la API KEY. Config√∫rala en Streamlit Cloud ‚Üí Settings ‚Üí Secrets con:\n\n"
        '`GOOGLE_API_KEY="tu_clave"`'
    )
else:
    try:
        genai.configure(api_key=API_KEY)
    except Exception as e:
        st.error(f"‚ö†Ô∏è Error configurando la API KEY: {e}")


# ==============================
# Utilidades de limpieza y formato
# ==============================
_bullet_regex = re.compile(r"^\s*[-‚Ä¢]\s*")

def normaliza_numeracion(linea: str) -> str:
    """
    Arregla encabezados del tipo '1. 1. T√≠tulo' ‚Üí '1. T√≠tulo'
    y tambi√©n elimina numeraciones duplicadas como '2. 2. 2.' etc.
    """
    # Quita repeticiones del patr√≥n: "d. " repetido
    linea = re.sub(r"^(\s*\d+\.\s+)(\d+\.\s+)+", r"\1", linea)
    return linea

def limpiar_texto_base(texto: str) -> str:
    """
    - Elimina **negritas** Markdown (se aplicar√° negrita en Word o con Markdown controlado).
    - Quita asteriscos sueltos.
    - Convierte bullets '-', '*' a '‚Ä¢ ' para homogeneidad.
    - Normaliza numeraci√≥n duplicada tipo '1. 1.'
    """
    # Quitar **negritas** de Markdown
    texto = re.sub(r"\*\*(.*?)\*\*", r"\1", texto)

    # Sustituir bullets comunes por ‚Ä¢
    lineas = []
    for raw in texto.splitlines():
        l = raw.rstrip()

        # Normalizaci√≥n de numeraci√≥n
        l = normaliza_numeracion(l)

        # Reemplazos de bullets: "* ", "- "
        if re.match(r"^\s*[\*\-]\s+", l):
            l = re.sub(r"^\s*[\*\-]\s+", "‚Ä¢ ", l)

        # Eliminar asteriscos sueltos restantes
        if "*" in l:
            l = l.replace("*", "")

        lineas.append(l)

    return "\n".join(lineas).strip()

def es_encabezado(linea: str) -> bool:
    """
    Consideramos encabezado una l√≠nea que:
    - Comienza por n√∫mero + punto + espacio (e.g., '1. ...'), o
    - Contiene frases t√≠picas de secci√≥n del informe.
    """
    if re.match(r"^\d+\.\s", linea.strip()):
        return True

    # Fallback por si el modelo no numera alg√∫n t√≠tulo, detectamos frases comunes:
    patrones = [
        "Acciones Preventivas", "Acciones preventivas",
        "Estimaci√≥n de ahorro", "Estimacion de ahorro",
        "Panel de alertas", "Informe ejecutivo",
    ]
    return any(pat.lower() in linea.lower() for pat in patrones)


# ==============================
# Generaci√≥n de DOCX (sin ‚ÄúResumen de activos‚Äù)
# ==============================
def generar_word(informe: str) -> BytesIO:
    doc = Document()

    # M√°rgenes y portada
    sec = doc.sections[0]
    sec.top_margin = Inches(1)
    sec.bottom_margin = Inches(1)
    sec.left_margin = Inches(1)
    sec.right_margin = Inches(1)

    # Logo
    try:
        p_logo = doc.add_paragraph()
        r_logo = p_logo.add_run()
        r_logo.add_picture("images/logo.png", width=Inches(2))
        p_logo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    except Exception:
        pass

    # T√≠tulo portada
    tit = doc.add_paragraph("Gemini Assist")
    tit.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    rt = tit.runs[0]
    rt.bold = True
    rt.font.size = Pt(26)

    subt = doc.add_paragraph("Informe Predictivo de Mantenimiento Hospitalario")
    subt.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    rs = subt.runs[0]
    rs.font.size = Pt(13)
    rs.font.color.rgb = RGBColor(90, 90, 90)

    fecha = doc.add_paragraph(datetime.now().strftime("%d/%m/%Y"))
    fecha.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    rf = fecha.runs[0]
    rf.font.size = Pt(11)
    rf.font.color.rgb = RGBColor(90, 90, 90)

    doc.add_page_break()

    # Contenido (sin ‚ÄúResumen de activos‚Äù)
    texto = limpiar_texto_base(informe)

    for raw in texto.splitlines():
        linea = raw.strip()
        if not linea:
            continue

        # Encabezado
        if es_encabezado(linea):
            p = doc.add_paragraph()
            r = p.add_run(linea)
            r.bold = True
            r.font.size = Pt(13)
            p.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT
            continue

        # Bullet
        if _bullet_regex.match(linea):
            p = doc.add_paragraph(linea[_bullet_regex.match(linea).end():], style="List Bullet")
            p.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            for run in p.runs:
                run.font.size = Pt(11)
            continue

        # P√°rrafo normal
        p = doc.add_paragraph(linea)
        p.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        for run in p.runs:
            run.font.size = Pt(11)

    # Exportar
    buf = BytesIO()
    doc.save(buf)
    buf.seek(0)
    return buf


# ==============================
# Interfaz principal
# ==============================
st.subheader("üìé Sube el archivo de activos (Excel)")
uploaded_file = st.file_uploader("Arrastra y suelta, o pulsa en **Browse files**", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        st.success("‚úÖ Archivo cargado correctamente")
        st.dataframe(df.head(50), use_container_width=True)

        if st.button("üöÄ Generar Informe", type="primary"):
            with st.spinner("üß† Generando informe con Gemini Assist..."):
                try:
                    # Preparamos texto de la tabla (no incluimos resumen en Word)
                    tabla_texto = df.to_string(index=False)

                    prompt = f"""
Eres Gemini Assist, un sistema experto en mantenimiento hospitalario.

Analiza la siguiente tabla de activos y genera **EXCLUSIVAMENTE** el contenido del informe (sin tablas y sin ‚ÄúResumen de activos‚Äù):

{tabla_texto}

Secciones que debes entregar (texto, bien redactado, sin Markdown y sin asteriscos):
1. Acciones preventivas para los 3 activos m√°s cr√≠ticos.
   - Usa vi√±etas con ‚Äú‚Ä¢‚Äù (no asteriscos).
2. Estimaci√≥n de ahorro en ‚Ç¨ y horas si se aplican esas medidas.
   - Usa vi√±etas con ‚Äú‚Ä¢‚Äù.
3. Panel de alertas por activo (Bajo, Medio, Alto).
   - Vi√±etas ‚Äú‚Ä¢‚Äù.
4. Informe ejecutivo final (m√°ximo 5 l√≠neas).
   - P√°rrafo directo, sin vi√±etas.

Reglas:
- No uses **negritas** ni # ni * (no Markdown).
- Numera los t√≠tulos como ‚Äú1. ...‚Äù, ‚Äú2. ...‚Äù (sin repetir ‚Äú1. 1.‚Äù).
- Usa ‚Äú‚Ä¢ ‚Äù para vi√±etas dentro de cada secci√≥n.
- Redacci√≥n profesional, clara, en espa√±ol.
"""

                    model = genai.GenerativeModel("gemini-2.5-flash")
                    resp = model.generate_content(prompt)
                    informe_raw = resp.text or ""

                    # Limpieza/normalizaci√≥n
                    informe_limpio = limpiar_texto_base(informe_raw)

                    # Presentaci√≥n en pantalla con t√≠tulos en negrita y vi√±etas
                    st.subheader("üìÑ Informe (vista previa)")
                    vista_md = []
                    for raw in informe_limpio.splitlines():
                        l = raw.strip()
                        if not l:
                            continue
                        if es_encabezado(l):
                            vista_md.append(f"**{l}**")
                        elif _bullet_regex.match(l):
                            # Mostrar como lista Markdown limpia
                            vista_md.append(f"- {l[_bullet_regex.match(l).end():]}")
                        else:
                            vista_md.append(l)
                    st.markdown("\n\n".join(vista_md))

                    # DOCX
                    word_bytes = generar_word(informe_limpio)
                    st.download_button(
                        "‚¨áÔ∏è Descargar Informe (Word)",
                        data=word_bytes,
                        file_name="informe_predictivo.docx",
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    )

                except Exception as e:
                    st.error(f"‚ùå Error al generar el informe: {e}")

    except Exception as e:
        st.error(f"‚ùå No se pudo leer el Excel: {e}")

else:
    st.info("Carga un archivo .xlsx para comenzar.")
